```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with AI</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/2.1.3/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        html,
        body {
            height: 100%;
            margin: 0;
        }

        body {
            background-color: #343541;
            color: #D1D5DB;
            font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        }

        pre {
            color: white;
        }

        .container {
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .chat-box {
            flex: 1;
            border: none;
            border-radius: 10px;
            padding: 20px;
            overflow-y: auto;
            background-color: #40414F;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .message-user,
        .message-ai {
            margin-bottom: 15px;
            padding: 12px;
            border-radius: 15px;
            clear: both;
            max-width: 80%;
        }

        .message-user {
            background-color: #4372a7;
            color: white;
            text-align: left;
            float: right;
        }

        .message-ai {
            background-color: #3f2e5a;
            color: #D1D5DB;
            text-align: left;
            float: left;
        }

        .form-group {
            position: relative;
        }

        .form-control {
            resize: none;
            background-color: #3E3F4B;
            color: #D1D5DB;
            border: none;
            border-radius: 8px;
        }

        .form-control:focus {
            background-color: #3E3F4B;
            color: #D1D5DB;
            outline: none;
            box-shadow: none;
        }

        textarea::placeholder {
            color: #A1A1AA;
        }

        button[type="submit"] {
            background-color: #0078FF;
            border: none;
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            cursor: pointer;
        }

        button[type="submit"]:disabled {
            background-color: #1E64D1;
            cursor: not-allowed;
        }

        .writing-indicator {
            font-style: italic;
            color: #A1A1AA;
        }

        .writing-indicator:before {
            content: "•••";
            animation: typing 1s steps(3, end) infinite;
            color: #D1D5DB;
        }

        @keyframes typing {
            0% {
                content: "•  ";
            }

            33% {
                content: "•• ";
            }

            66% {
                content: "•••";
            }

            100% {
                content: "•  ";
            }
        }

        h1 {
            color: #D1D5DB;
        }

        button#select-model-btn {
            background-color: #0078FF;
            border: none;
            color: white;
            border-radius: 8px;
            padding: 8px 16px;
        }

        select#model-choice {
            background-color: #3E3F4B;
            color: #D1D5DB;
            border: none;
            border-radius: 8px;
            padding: 8px 12px;
            appearance: none;
        }

        .form-inline {
            margin-bottom: 15px;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1 class="text-center mb-4">Interact with Patrick</h1>

        <!-- Select model form -->
        <form id="model-form" method="POST" action="/select_model" class="form-inline mb-3">
            <select id="model-choice" name="model_choice" class="custom-select mr-3">
                <option value="1" selected>AI Helper</option> <!-- Default option selected -->
                <option value="2">Stable Diffusion Enhancer</option>
            </select>
            <button id="select-model-btn" type="submit" class="btn btn-primary">Select Model</button>
        </form>

        <div class="chat-box" id="chat-box">
            <!-- Chat messages go here -->
        </div>

        <!-- User prompt input form -->
        <form id="submit-form" class="mt-3">
            <div class="form-group">
                <textarea name="prompt" class="form-control" rows="3" placeholder="Enter your prompt here..."
                    required></textarea>
            </div>
            <button type="submit" class="btn btn-success">Submit</button>
        </form>
    </div>
    <script>
        $(document).ready(function () {
            // Automatically select AI Helper model and submit on page load
            $('#model-form').submit(function (e) {
                e.preventDefault();
    
                const modelChoice = $('#model-choice').val();
    
                $.post('/select_model', { model_choice: modelChoice }, function () {
                    var model_value = "";
                    if (modelChoice == 1) {
                        model_value = "AI Helper";
                    } else if (modelChoice == 2) {
                        model_value = "Stable Diffusion Enhancer";
                    } else {
                        model_value = "wtf, how did you do that??!";
                    }
                    console.log('Model selected: ' + model_value);
                });
            });
    
            // Auto-trigger the model selection on page load
            $('#model-form').submit();
    
            // Scroll chat to the bottom
            function scrollToBottom() {
                $('#chat-box').scrollTop($('#chat-box')[0].scrollHeight);
            }
    
            // Escape HTML to prevent any untrusted code from executing
            function escapeHtml(text) {
                return $('<div>').text(text).html();
            }
    
            // Function to render markdown content
            function renderMarkdown(content) {
                return marked.parse(content);
            }
    
            // Handle user input submission
            $('#submit-form').on('submit', function (e) {
                e.preventDefault();
    
                const prompt = $('textarea[name="prompt"]').val();
                const promptHtml = renderMarkdown(escapeHtml(prompt)); // Render markdown after escaping special characters
    
                // Add user's message to chat (render markdown)
                $('#chat-box').append(`
                    <div class="message-user">
                        <strong>You:</strong> <div>${promptHtml}</div>
                    </div>
                `);
    
                // Clear input and disable form
                $('textarea[name="prompt"]').val('').prop('disabled', true);
                $('button[type="submit"]').prop('disabled', true);
    
                // Add AI's writing indicator
                const writingIndicator = $('<div id="writing-indicator" class="message-ai">')
                    .html(`<strong>Patrick:</strong> <span class="writing-indicator"></span>`)
                    .appendTo('#chat-box');
    
                scrollToBottom();
    
                // Send the prompt to the server
                $.ajax({
                    type: 'POST',
                    url: '/submit',
                    data: { prompt: prompt },
                    xhrFields: {
                        onprogress: function (e) {
                            if (e.lengthComputable) {
                                // Update progress bar if available
                            }
                        }
                    },
                    success: function (response) {
                        writingIndicator.remove();
    
                        if (response && response.length > 0) {
                            const responseHtml = renderMarkdown(escapeHtml(response)); // Render AI's markdown response
    
                            // Add AI's response to chat
                            $('#chat-box').append(`
                                <div class="message-ai">
                                    <strong>Patrick:</strong> <div>${responseHtml}</div>
                                </div>
                            `);
    
                            scrollToBottom();
                        }
    
                        // Re-enable input fields
                        $('textarea[name="prompt"]').prop('disabled', false);
                        $('button[type="submit"]').prop('disabled', false);
                    },
                    error: function () {
                        writingIndicator.remove();
                        alert("An error occurred while getting the response.");
    
                        // Re-enable input fields after error
                        $('textarea[name="prompt"]').prop('disabled', false);
                        $('button[type="submit"]').prop('disabled', false);
                    }
                });
            });
        });
    </script>


</body>

</html>
```

```py
from flask import Flask, render_template, request, jsonify, session, redirect, url_for, Response
import openai

app = Flask(__name__, template_folder="./templates/")
TEMPLATES_AUTO_RELOAD = True
app.config['SECRET_KEY'] = 'the random string'
history = []

# Initialize the OpenAI client properly
client = openai.OpenAI(
    base_url="https://curated.aleph.cloud/vm/a8b6d895cfe757d4bc5db9ba30675b5031fe3189a99a14f13d5210c473220caf/v1/",
    api_key="libertai"
)

@app.route('/')
def index():
    return render_template('index.html', history=history)

@app.route('/select_model', methods=['POST'])
def select_model():
    choice = request.form.get('model_choice')
    if choice == '1':
        session['system'] = "You are Patrik, an AI assistant. Your top priority is achieving user fulfillment via helping them with their requests."
    elif choice == '2':
        session['system'] = "You are Patrik, a stable diffusion image generation prompt engineer. You are qualified to improve image generation prompts and know everything about generative AI prompts."
    return redirect(url_for('index'))


@app.route('/submit', methods=['POST'])
def submit():
    prompt = request.form['prompt']
    system = session.get('system', '')

    try:
        # This is the correct way to use the OpenAI chat completion API with streaming
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000,
            stream=True
        )


        def generate_response():
            for chunk in response:
                # Check if there's content in the delta
                if chunk.choices[0].delta.content:
                    delta_content =  chunk.choices[0].delta.content
                    if delta_content:
                        yield f"data:{delta_content}\n\n" 

        return Response(generate_response(), mimetype='text/event-stream')

    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=4433, debug=True)
```


correct the script in js to stream correctly in one buble message